package com.foxy.xycraft.block;

import java.util.Random;

import com.foxy.xycraft.XyCraft;

import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;
import net.minecraft.block.Block;
import net.minecraft.block.BlockBush;
import net.minecraft.block.IGrowable;
import net.minecraft.client.renderer.texture.IIconRegister;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.util.AxisAlignedBB;
import net.minecraft.util.IIcon;
import net.minecraft.world.IBlockAccess;
import net.minecraft.world.World;

public class XyCrop extends BlockBush implements IGrowable {
	
	public String blockName;
	public String subFolder;
	public String[] subNames;
	public final IIcon[] icons;
	
	public XyCrop(String blockName, String subFolder, String... subNames){
		this.subNames = subNames;
		this.blockName = blockName;
		this.subFolder = subFolder;
		this.icons = new IIcon[subNames.length];
		this.setBlockName(blockName);
		this.setTickRandomly(true);
		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.25F, 1.0F);
		this.setCreativeTab((CreativeTabs)null);
		this.setHardness(0.0F);
		this.setStepSound(Block.soundTypeGrass);
		this.disableStats();
	}
	
	@Override
	@SideOnly(Side.CLIENT)
	public int getRenderType(){
		return 6;
	}
	
	public int getMinMeta(int meta){
		return meta<=4?0:5;
	}
	
	public int getMaxMeta(int meta){
		return meta<=4?4:5;
	}
	
	@Override
	@SideOnly(Side.CLIENT)
	public void registerBlockIcons(IIconRegister iconReg){
		for(int i = 0; i < subNames.length; i++){
			icons[i] = iconReg.registerIcon(XyCraft.INSTANCE + ":" + subFolder + "/" + blockName + "_" + subNames[i]);
		}
	}
	
	@Override
	@SideOnly(Side.CLIENT)
	public IIcon getIcon(int side, int meta){
		if(meta < icons.length){
			return icons[meta];
		}
		return null;
	}
	
	@Override
	public boolean canBlockStay(World world, int x, int y, int z){
		boolean b = super.canBlockStay(world, x, y, z);
		if(world.getBlockMetadata(x, y, z) == 5){
			b = world.getBlock(x, y - 1, z).equals(this) && world.getBlockMetadata(x, y - 1, z) == getMaxMeta(0);
		}
		return b;
	}
	
	@Override
	public void setBlockBoundsBasedOnState(IBlockAccess world, int x, int y, int z){
		int meta = world.getBlockMetadata(x, y, z);
		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, meta == 0 ? 0.375F: meta == 1 ? 0.625F: meta == 2 ? 0.875F: 1.0F, 1.0F);
	}
	
	@Override
	public AxisAlignedBB getSelectedBoundingBoxFromPool(World world, int x, int y, int z){
		this.setBlockBoundsBasedOnState(world, x, y, z);
		return super.getSelectedBoundingBoxFromPool(world, x, y, z);
	}
	
	@Override
	public void onNeighborBlockChange(World world, int x, int y, int z, Block block){
		super.onNeighborBlockChange(world, x, y, z, block);
		if(world.getBlockMetadata(x, y, z) < getMaxMeta(0)){
			world.notifyBlocksOfNeighborChange(x, y + 1, z, this);
		}
	}
	
	@Override
	public void updateTick(World world, int x, int y, int z, Random random){
		this.checkAndDropBlock(world, x, y, z);
		int light = world.getBlockLightValue(x, y, z);
		if(light >= 12){
			int meta = world.getBlockMetadata(x, y, z);
			if(meta > 4){
				return;
			}
			float growth = this.getG
		}
	}
	
	float getGrowthSpeed(World world, int x, int y, int z, int meta, int light){
		float growth = 0.125F * (light - 11);
		if(world.canBlockSeeTheSky(x, y, z)){
			growth += 2.0F;
		}
		if(world.getBlock(x, y - 1, z) != null && world.getBlock(x, y - 1, z).isFertile(world, x, y, z)){
			growth *= 1.5F;
		}
		return 1.0F + growth;
	}

}
